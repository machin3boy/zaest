import "./aes" as aes;
import "./field_to_u8_16" as field_to_u8_16;
import "utils/pack/u32/unpack128" as unpack128;
import "hashes/sha256/sha256Padded" as sha256;

def verify_aes(field inputA, field inputB, field inputC, field inputD, field cipherA, field cipherB, field cipherC, field cipherD, field masterKey) -> bool {

    bool check1 = aes(inputA, masterKey) == cipherA;
    bool check2 = aes(inputB, masterKey) == cipherB;
    bool check3 = aes(inputC, masterKey) == cipherC;
    bool check4 = aes(inputD, masterKey) == cipherD;

    return (check1 && check2 && check3 && check4);
}

/*
function implemented:

function(
    public field PBK, private field u,
    private field d', private field up,
    private field ar, private field v,
    public field o, public field a,
    public field c, public field h_key,
    public field h_ru, public field h_da,
    public field h_dp, public field h_ipfs_d) {
        prove that:
            1. h_key == hash(PBK++u)
            2. h_ru == hash(d' ++ up() ++ ar ++ v)
            3. o == hash(v ++ u)
            4. a == encrypt_AES(d', u)
            5. h_da == hash(d' ++ a ++ u)
            6. h_dp == hash(d')
            7. h_ipfs_d == hash(a ++ o ++ c)
}
*/

def main(field PBK_A, field PBK_B, private field u, private field dPrimeA, private field dPrimeB, private field dPrimeC, private field dPrimeD, field aA, field aB, field aC, field aD, field h_keyA, field h_keyB, field h_dpA, field h_dpB) -> bool {
  
    bool condition1         = sha256([...field_to_u8_16(PBK_A), ...field_to_u8_16(PBK_B), ...field_to_u8_16(u)]) == [...unpack128(h_keyA), ...unpack128(h_keyB)];
    bool condition4         = verify_aes(dPrimeA, dPrimeB, dPrimeC, dPrimeD, aA, aB, aC, aD, u);
    bool condition6         = sha256([...field_to_u8_16(dPrimeA), ...field_to_u8_16(dPrimeB), ...field_to_u8_16(dPrimeC), ...field_to_u8_16(dPrimeD)]) == [...unpack128(h_dpA), ...unpack128(h_dpB)];

    return (condition1 && condition4 && condition6);
}


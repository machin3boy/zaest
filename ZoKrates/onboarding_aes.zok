import "./aes.zok" as aes;
import "utils/pack/bool/unpack256" as unpack256;
import "utils/pack/bool/unpack128" as unpack128;
import "utils/pack/u32/pack128" as pack128;
import "utils/casts/u32_from_bits" as u32_from_bits;
import "hashes/sha256/sha256.zok" as sha256;
import "hashes/sha256/256bitPadded.zok" as hash256;
import "hashes/sha256/512bit.zok" as hash512;
import "hashes/sha256/1024bit.zok" as hash1024;

def field_to_u32_8(field f) -> u32[8] {

    bool[256] bits = unpack256(f);

    return [u32_from_bits(bits[0..32]), u32_from_bits(bits[32..64]), u32_from_bits(bits[64..96]), u32_from_bits(bits[96..128]), u32_from_bits(bits[128..160]), u32_from_bits(bits[160..192]), u32_from_bits(bits[192..224]), u32_from_bits(bits[224..256])];
}

def field_to_packed_fields(field f) -> field[2] {

    u32[8] f_to_u32_8 = field_to_u32_8(f);

    return [pack128(f_to_u32_8[0..4]), pack128(f_to_u32_8[4..8])];
}

def verify_hash_256_bits(field inputValue, field inputHash) -> bool {

    u32[8] inputValueArray = field_to_u32_8(inputValue);
    u32[8] inputHashArray  = field_to_u32_8(inputHash); 
    u32[8] computedHash    = hash256(inputValueArray);

    return computedHash == inputHashArray;
}

def verify_hash_512_bits(field inputValueA, field inputValueB, field inputHash) -> bool {

    u32[8] inputValueArrayA = field_to_u32_8(inputValueA);
    u32[8] inputValueArrayB = field_to_u32_8(inputValueB);
    u32[8] inputHashArray   = field_to_u32_8(inputHash);
    u32[8] computedHash     = hash512(inputValueArrayA, inputValueArrayB);

    return computedHash == inputHashArray;
}

def verify_hash_1024_bits(field inputValueA, field inputValueB, field inputValueC, field inputValueD, field inputHash) -> bool {

    u32[8] inputValueArrayA = field_to_u32_8(inputValueA);
    u32[8] inputValueArrayB = field_to_u32_8(inputValueB);
    u32[8] inputValueArrayC = field_to_u32_8(inputValueC);
    u32[8] inputValueArrayD = field_to_u32_8(inputValueD);
    u32[8] inputHashArray   = field_to_u32_8(inputHash);
    u32[8] computedHash     = hash1024(inputValueArrayA, inputValueArrayB, inputValueArrayC, inputValueArrayD);

    return computedHash == inputHashArray;

}

def verify_aes_1024_bits(field inputValueA, field inputValueB, field inputValueC, field inputValueD, field cipherValueA, field cipherValueB, field cipherValueC, field cipherValueD, field masterKey) -> bool {

    field[2] inputValueA_128 = field_to_packed_fields(inputValueA);
    field[2] inputValueB_128 = field_to_packed_fields(inputValueB);
    field[2] inputValueC_128 = field_to_packed_fields(inputValueC);
    field[2] inputValueD_128 = field_to_packed_fields(inputValueD);
    field[2] cipherValueA_128 = field_to_packed_fields(cipherValueA);
    field[2] cipherValueB_128 = field_to_packed_fields(cipherValueB);
    field[2] cipherValueC_128 = field_to_packed_fields(cipherValueC);
    field[2] cipherValueD_128 = field_to_packed_fields(cipherValueD);
    field[2] masterKey_128    = field_to_packed_fields(masterKey);

    bool check1 = aes(inputValueA_128[0], cipherValueA_128[0], masterKey_128[0]);
    bool check2 = aes(inputValueA_128[1], cipherValueA_128[1], masterKey_128[0]);
    bool check3 = aes(inputValueB_128[0], cipherValueB_128[0], masterKey_128[0]);
    bool check4 = aes(inputValueB_128[1], cipherValueB_128[1], masterKey_128[0]);
    bool check5 = aes(inputValueC_128[0], cipherValueC_128[0], masterKey_128[0]);
    bool check6 = aes(inputValueC_128[1], cipherValueC_128[1], masterKey_128[0]);
    bool check7 = aes(inputValueD_128[0], cipherValueD_128[0], masterKey_128[0]);
    bool check8 = aes(inputValueD_128[1], cipherValueD_128[1], masterKey_128[0]);

    return (check1 && check2 && check3 && check4 && check5 && check6 && check7 && check8);
}

/*
hash lengths:

PBK     = 40  bytes cut down to 32 bytes = 256 bits
u       = 16  bytes = 128 bits           = 256 bits padded
d'      = 128 bytes = 1024 bits          = 1024 bits
up      = 10  bytes = 80  bits           = 256 bits padded
ar      = 10  bytes = 80  bits           = 256 bits padded
t-limit = 4   bytes = 16  bits           = 256 bits padded
o       = 32  bytes = 256 bits           = 256 bits padded
a       = 128 bytes = 1024 bits          = 1024 bits
v       = 20  bytes = 160 bits           = 256 bits padded
n       = 10  bytes = 80  bits           = 256 bits padded
c       = 60  bytes = 480 bits           = 512 bits padded
e_rs    = 128 bytes = 1024 bits          = 1024 bits padded

h_key       ->      PBK ++ u        -> 256 + 256        = 512               -> 512 
h_ru        -> d'++up++ar++v++t_lim -> 1024 + 256 + 256 + 256 + 256 = 2048  -> 2048
o           ->      v  ++  u        -> 256 + 256        = 512               -> 512 
h_da        ->    d' ++ a ++ u      -> 1024+1024+256    = 2304 bits         -> 2560
h_dp        ->         d'           -> 1024             = 1024 bits         -> 1024
h_ipfs_d    ->    a  ++ o ++ c      -> 1024+256+512     = 1792 bits         -> 2048

h_tx        ->      v  ++  n        -> 256 + 256        = 512 bits          -> 512 
h_dn        ->    d  ++ v ++ n      -> 1024 + 256 + 256 = 1536 bits         -> 1536
h_ipfs_p    ->     e_rs ++ c        -> 1024 + 512       = 1536 bits         -> 1536

*/

/*
function implemented:

function(
    public field PBK, private field u,
    private field d', private field up,
    private field ar, private field v,
    public field o,bpublic field a,
    public field c, public field h_key,
    public field h_ru, public field h_da,
    public field h_dp, public field h_ipfs_d) {
        prove that:
            1. h_key == hash(PBK++u)
            2. h_ru == hash(d' ++ up() ++ ar
            ++ v ++ t_limit)
            3. o == hash(v ++ u)
            4. a == encrypt_AES(d', u)
            5. h_da == hash(d' ++ a ++ u)
            6. h_dp == hash(d')
            7. h_ipfs_d == hash(a ++ o ++ c)
}
*/

def main(field PBK, private field u, private field dPrimeA, private field dPrimeB, private field dPrimeC, private field dPrimeD, field aA, field aB, field aC, field aD, field h_key, field h_dp) -> bool {
  
    bool condition1         = verify_hash_512_bits(PBK, u, h_key);
    bool condition4         = verify_aes_1024_bits(dPrimeA, dPrimeB, dPrimeC, dPrimeD, aA, aB, aC, aD, u);
    bool condition6         = verify_hash_1024_bits(dPrimeA, dPrimeB, dPrimeC, dPrimeD, h_dp);

    return (condition1 && condition4 && condition6);
}


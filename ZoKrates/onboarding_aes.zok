import "./aes" as aes;
import "./hash_512" as hash512;
import "./hash_1024" as hash1024;

def verify_aes_1024_bits(field inputA, field inputB, field inputC, field inputD, field inputE, field inputF, field inputG, field inputH, field cipherA, field cipherB, field cipherC, field cipherD, field cipherE, field cipherF, field cipherG, field cipherH, field masterKey) -> bool {

    bool check1 = aes(inputA, masterKey) == cipherA;
    bool check2 = aes(inputB, masterKey) == cipherB;
    bool check3 = aes(inputC, masterKey) == cipherC;
    bool check4 = aes(inputD, masterKey) == cipherD;
    bool check5 = aes(inputE, masterKey) == cipherE;
    bool check6 = aes(inputF, masterKey) == cipherF;
    bool check7 = aes(inputG, masterKey) == cipherG;
    bool check8 = aes(inputH, masterKey) == cipherH;

    return (check1 && check2 && check3 && check4 && check5 && check6 && check7 && check8);
}

/*
function implemented:

function(
    public field PBK, private field u,
    private field d', private field up,
    private field ar, private field v,
    public field o, public field a,
    public field c, public field h_key,
    public field h_ru, public field h_da,
    public field h_dp, public field h_ipfs_d) {
        prove that:
            1. h_key == hash(PBK++u)
            2. h_ru == hash(d' ++ up() ++ ar ++ v)
            3. o == hash(v ++ u)
            4. a == encrypt_AES(d', u)
            5. h_da == hash(d' ++ a ++ u)
            6. h_dp == hash(d')
            7. h_ipfs_d == hash(a ++ o ++ c)
}
*/

def main(field PBK_A, field PBK_B, private field u, private field dPrimeA, private field dPrimeB, private field dPrimeC, private field dPrimeD, private field dPrimeE, private field dPrimeF, private field dPrimeG, private field dPrimeH, field aA, field aB, field aC, field aD, field aE, field aF, field aG, field aH, field h_keyA, field h_keyB, field h_dpA, field h_dpB, field padding) -> bool {
  
    bool condition1         = hash512(PBK_A, PBK_B, u, padding) == [h_keyA, h_keyB];
    bool condition4         = verify_aes_1024_bits(dPrimeA, dPrimeB, dPrimeC, dPrimeD, dPrimeE, dPrimeF, dPrimeG, dPrimeH, aA, aB, aC, aD, aE, aF, aG, aH, u);
    bool condition6         = hash1024(dPrimeA, dPrimeB, dPrimeC, dPrimeD, dPrimeE, dPrimeF, dPrimeG, dPrimeH) == [h_dpA, h_dpB];

    return (condition1 && condition4 && condition6);
}


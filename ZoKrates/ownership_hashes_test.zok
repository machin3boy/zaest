import "./field_to_u8_16" as field_to_u8_16;
import "utils/pack/u32/unpack128" as unpack128;
import "hashes/sha256/sha256Padded" as sha256;
import "utils/pack/u32/pack128" as pack128;

/*
function implemented:

function( private field u, public field PBK,
    private field v, public field n,
    private field d, public field o,
    public field a, public field e_rs,
    public field c, public field h_key,
    public field h_tx, public field h_da,
    public field h_dn, public field h_ipfs_p){
    prove that:
        1. h_key == hash(PBK ++ u)
        2. h_tx == hash(v ++ n)
        3. o == hash(v ++ u)
        4. h_da == hash(d ++ a ++ u)
        5. h_dn == hash(d ++ v ++ n)
        6. h_ipfs_p == hash(e_rs ++ c)
}

*/

def main(field PBK_A, field PBK_B, private field u, private field dA, private field dB, private field dC, private field dD, private field vA, private field vB, field aA, field aB, field aC, field aD, field oA, field oB, field n, field cA, field cB, field cC, field cD, field e_rsA, field e_rsB, field e_rsC, field e_rsD) -> field[12] {  

    u32[8] h_key               = sha256([...field_to_u8_16(PBK_A), ...field_to_u8_16(PBK_B), ...field_to_u8_16(u)]);
    field[2] h_key_fields      = [pack128(h_key[0..4]), pack128(h_key[4..8])];

    u32[8] h_tx                = sha256([...field_to_u8_16(vA), ...field_to_u8_16(vB), ...field_to_u8_16(n)]);
    field[2] h_tx_fields       = [pack128(h_tx[0..4]), pack128(h_tx[4..8])];

    u32[8] o                   = sha256([...field_to_u8_16(vA), ...field_to_u8_16(vB), ...field_to_u8_16(u)]);
    field[2] o_fields          = [pack128(o[0..4]), pack128(o[4..8])];

    u32[8] h_da                = sha256([...field_to_u8_16(dA), ...field_to_u8_16(dB), ...field_to_u8_16(dC), ...field_to_u8_16(dD), ...field_to_u8_16(aA), ...field_to_u8_16(aB), ...field_to_u8_16(aC), ...field_to_u8_16(aD), ...field_to_u8_16(u)]);
    field[2] h_da_fields       = [pack128(h_da[0..4]), pack128(h_da[4..8])];

    u32[8] h_dn                = sha256([...field_to_u8_16(dA), ...field_to_u8_16(dB), ...field_to_u8_16(dC), ...field_to_u8_16(dD), ...field_to_u8_16(vA), ...field_to_u8_16(vB), ...field_to_u8_16(n)]);
    field[2] h_dn_fields       = [pack128(h_dn[0..4]), pack128(h_dn[4..8])];

    u32[8] h_ipfs_p            = sha256([...field_to_u8_16(e_rsA), ...field_to_u8_16(e_rsB), ...field_to_u8_16(e_rsC), ...field_to_u8_16(e_rsD), ...field_to_u8_16(cA), ...field_to_u8_16(cB), ...field_to_u8_16(cC), ...field_to_u8_16(cD)]);
    field[2] h_ipfs_p_fields   = [pack128(h_ipfs_p[0..4]), pack128(h_ipfs_p[4..8])];

    return [...h_key_fields, ...h_tx_fields, ...o_fields, ...h_da_fields, ...h_dn_fields, ...h_ipfs_p_fields];
}



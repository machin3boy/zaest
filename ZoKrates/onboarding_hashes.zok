import "./hash_512" as hash512;
import "./hash_1536" as hash1536;
import "./hash_2560" as hash2560;

/*
function implemented:

function(
    public field PBK, private field u,
    private field d', private field up,
    private field ar, private field v,
    public field o, public field a,
    public field c, public field h_key,
    public field h_ru, public field h_da,
    public field h_dp, public field h_ipfs_d) {
        prove that:
            1. h_key == hash(PBK++u)
            2. h_ru == hash(d' ++ up() ++ ar ++ v)
            3. o == hash(v ++ u)
            4. a == encrypt_AES(d', u)
            5. h_da == hash(d' ++ a ++ u)
            6. h_dp == hash(d')
            7. h_ipfs_d == hash(a ++ o ++ c)
}
*/

def main(field PBK_A, field PBK_B, private field u, private field dPrimeA, private field dPrimeB, private field dPrimeC, private field dPrimeD, private field dPrimeE, private field dPrimeF, private field dPrimeG, private field dPrimeH, private field up, private field ar, private field vA, private field vB, field aA, field aB, field aC, field aD, field aE, field aF, field aG, field aH, field oA, field oB, field cA, field cB, field cC, field cD, field h_keyA, field h_keyB, field h_ruA, field h_ruB, field h_daA, field h_daB, field h_ipfs_dA, field h_ipfs_dB, field padding) -> bool {  

    bool condition1         = hash512(PBK_A, PBK_B, u, padding) == [h_keyA, h_keyB];
    bool condition2         = hash1536(dPrimeA, dPrimeB, dPrimeC, dPrimeD, dPrimeE, dPrimeF, dPrimeG, dPrimeH, up, ar, vA, vB) == [h_ruA, h_ruB];
    bool condition3         = hash512(vA, vB, u, padding)   == [oA, oB];
    bool condition5         = hash2560(dPrimeA, dPrimeB, dPrimeC, dPrimeD, dPrimeE, dPrimeF, dPrimeG, dPrimeH, aA, aB, aC, aD, aE, aF, aG, aH, u, padding, padding, padding) == [h_daA, h_daB];

    return (condition1 && condition2 && condition3 && condition5);
}


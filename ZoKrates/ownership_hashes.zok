import "./hash_512" as hash512;
import "./hash_1536" as hash1536;
import "./hash_2560" as hash2560;

/*
hash lengths:

PBK     = 40  bytes cut down to 32 bytes = 256 bits
u       = 16  bytes = 128 bits           = 256 bits padded
d'      = 128 bytes = 1024 bits          = 1024 bits
up      = 10  bytes = 80  bits           = 256 bits padded
ar      = 10  bytes = 80  bits           = 256 bits padded
t-limit = 4   bytes = 16  bits           = 256 bits padded
o       = 32  bytes = 256 bits           = 256 bits padded
a       = 128 bytes = 1024 bits          = 1024 bits
v       = 20  bytes = 160 bits           = 256 bits padded
n       = 10  bytes = 80  bits           = 256 bits padded
c       = 60  bytes = 480 bits           = 512 bits padded
e_rs    = 128 bytes = 1024 bits          = 1024 bits padded

h_key       ->      PBK ++ u        -> 256 + 256        = 512               -> 512 
h_ru        -> d'++up++ar++v++t_lim -> 1024 + 256 + 256 + 256 + 256 = 2048  -> 2048
o           ->      v  ++  u        -> 256 + 256        = 512               -> 512 
h_da        ->    d' ++ a ++ u      -> 1024+1024+256    = 2304 bits         -> 2560
h_dp        ->         d'           -> 1024             = 1024 bits         -> 1024
h_ipfs_d    ->    a  ++ o ++ c      -> 1024+256+512     = 1792 bits         -> 2048

h_tx        ->      v  ++  n        -> 256 + 256        = 512 bits          -> 512 
h_dn        ->    d  ++ v ++ n      -> 1024 + 256 + 256 = 1536 bits         -> 1536
h_ipfs_p    ->     e_rs ++ c        -> 1024 + 512       = 1536 bits         -> 1536
*/

/*
function implemented:

function( private field u, public field PBK,
    private field v, public field n,
    private field d, public field o,
    public field a, public field e_rs,
    public field c, public field h_key,
    public field h_tx, public field h_da,
    public field h_dn, public field h_ipfs_p){
    prove that:
        1. h_key == hash(PBK ++ u)
        2. h_tx == hash(v ++ n)
        3. o == hash(v ++ u)
        4. h_da == hash(d ++ a ++ u)
        5. h_dn == hash(d ++ v ++ n)
        6. h_ipfs_p == hash(e_rs ++ c)
}

*/

def main(field PBK, private field u, private field dA, private field dB, private field dC, private field dD, private field v, field aA, field aB, field aC, field aD, field o, field n, field h_key, field h_tx, field h_da, field h_dn, field padding) -> bool {  

    bool condition1         = hash512(PBK, u) == h_key;
    bool condition2         = hash512(v, n) == h_tx;
    bool condition3         = hash512(v, u) == o;
    bool condition4         = hash2560(dA, dB, dC, dD, aA, aB, aC, aD, u, padding) == h_da;
    bool condition5         = hash1536(dA, dB, dC, dD, v, n) == h_dn;

    return (condition1 && condition2 && condition3 && condition4 && condition5);
}

